# before running script:
# - git commit & push
# - run "module load anaconda"
# strongly advise removing the large *.sra.cache files generated by the script after download has finished.

import argparse

parser = argparse.ArgumentParser(description='Submit an sbatch job to fastq-dump each SRR listed in a file.')
parser.add_argument("--root-path")
parser.add_argument("--SRR-path")
parser.add_argument("--sbatch-time", default = "8:0:0")
parser.add_argument("--sbatch-mem", default = "8G")
parser.add_argument("--sbatch-email", default = "adelexu@stanford.edu")
parser.add_argument("--sbatch-email-type", default = "ALL")
parser.add_argument("--sbatch-account", default = "mbarna")
parser.add_argument("--sbatch-partition", default = "batch")
parser.add_argument("--fdargs", nargs=argparse.REMAINDER, default = "--split-files --readids --gzip --skip-technical --minSpotId 10001 --maxSpotId 10010000".split())
args = parser.parse_args()

import pandas as pd
import os
import subprocess
import json

df = pd.read_csv(args.SRR_path, sep="\t", names=["dir_name", "SRR"])

for index, row in df.iterrows():
    dest_path = os.path.join(args.root_path, row.dir_name)
    if not os.path.exists(dest_path):
        os.mkdir(dest_path)
        custom_fdargs = " ".join(args.fdargs+["--outdir",dest_path,row.SRR])
        cmd_line = f"sbatch \
--job-name={row.SRR} \
--chdir={dest_path} \
--output={row.SRR}.o \
--error={row.SRR}.e \
--mail-user={args.sbatch_email} \
--mail-type={args.sbatch_email_type} \
--time={args.sbatch_time} \
--mem={args.sbatch_mem} \
--account={args.sbatch_account} \
--partition={args.sbatch_partition} \
<<EOF \n\
#!/bin/sh \n\
module load sratoolkit/2.9.0 \n\
fastq-dump {custom_fdargs} \n\
EOF"
        subprocess.check_output(cmd_line, shell=True)
        
        # save github repo version, arguments to current python script, and sbatch command line to .config file for each SRR
        with open(os.path.join(dest_path, f"{row.SRR}_fastq-dump.config"), 'w') as config_file:
            git_version = str(subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip())
            configs = {"git version": git_version, "arguments": vars(args), "sbatch command line": cmd_line}
            json.dump(configs, config_file, indent=4)
    else:
        print(row.dir_name, ": ERROR: directory already exists")
    